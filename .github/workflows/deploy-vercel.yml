name: Deploy to Vercel

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: vercel-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Option 1: Use official Vercel action (requires secrets)
      - name: Deploy with Vercel Action
        uses: vercel/action@v3
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: .
          vercel-args: '--prod'
        if: ${{ secrets.VERCEL_TOKEN && secrets.VERCEL_ORG_ID && secrets.VERCEL_PROJECT_ID }}

      # Option 2: Fallback to CLI (also requires token and a linked project)
      - name: Vercel Pull (CLI)
        run: npx vercel pull --yes --environment=production --token "$VERCEL_TOKEN"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        if: ${{ ! (secrets.VERCEL_ORG_ID && secrets.VERCEL_PROJECT_ID) && secrets.VERCEL_TOKEN }}

      - name: Vercel Build (CLI)
        run: npx vercel build --prod --token "$VERCEL_TOKEN"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        if: ${{ ! (secrets.VERCEL_ORG_ID && secrets.VERCEL_PROJECT_ID) && secrets.VERCEL_TOKEN }}

      - name: Vercel Deploy (CLI)
        run: npx vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        if: ${{ ! (secrets.VERCEL_ORG_ID && secrets.VERCEL_PROJECT_ID) && secrets.VERCEL_TOKEN }}
